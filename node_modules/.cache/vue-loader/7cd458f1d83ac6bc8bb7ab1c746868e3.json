{"remainingRequest":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\pk\\Desktop\\my-world\\web\\src\\views\\diaryviews\\diary01.vue?vue&type=template&id=5bf9231a&","dependencies":[{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\src\\views\\diaryviews\\diary01.vue","mtime":1604652398225},{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"h3-comp\" }, [\n      _c(\"h3\", { staticClass: \"h3-title\" }, [_vm._v(\"闭包\")]),\n      _c(\"p\", { staticClass: \"p1\" }, [\n        _vm._v(\n          \"\\n    闭包是js基础绕不过的一个坑，对于非计算机专业的初学者来说，也是前期的一个小难点。闭包的定义非常简单，能够访问其他作用域的变量的函数就能称之为闭包。但在理解闭包之前，我们应该先理清的是js这门语言中作用域的特点。\\n  \"\n        )\n      ]),\n      _c(\"p\", { staticClass: \"p2\" }, [\n        _vm._v(\n          \"\\n    作用域说白了就是一个能产生作用的“域”，只有在这个范围内，变量和函数才能被访问和使用。超出了这个范围，就无法访问了。当html中的js代码放到浏览器运行时，所有的js代码都被放到了一个叫window的全局作用域中。es5中我们定义的所有全局变量，其实都是给window添加属性，所以会出现以下的情况。\\n  \"\n        )\n      ]),\n      _c(\"img\", {\n        attrs: { src: require(\"../../assets/diary01/ava01.png\"), alt: \"闭包一\" }\n      }),\n      _c(\"h4\", [_vm._v(\"作用域的嵌套\")]),\n      _c(\"p\", [\n        _vm._v(\n          \"\\n    作用域是可以嵌套的。由于js中没有块级作用域，我们常见的作用域嵌套都是函数作用域与函数作用域的嵌套。这里我们先来讲清一下函数定义和函数作用域产生的过程。\\n  \"\n        )\n      ]),\n      _c(\"p\", [_vm._v(\"首先，我们定义一个函数 hd\")]),\n      _c(\"div\", { staticClass: \"code-box\" }, [\n        _c(\"pre\", [\n          _vm._v(\"      \"),\n          _c(\"code\", { staticClass: \"language-css\" }, [\n            _vm._v(\n              \"\\n          var y = 2;\\n\\n          function hd () {\\n              var x = 1;\\n              console.log(x); \\n              console.log(y);\\n          }\\n      \"\n            )\n          ]),\n          _vm._v(\"\\n  \")\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}