{"remainingRequest":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\pk\\Desktop\\my-world\\web\\src\\views\\diaryviews\\diary01.vue?vue&type=template&id=5bf9231a&","dependencies":[{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\src\\views\\diaryviews\\diary01.vue","mtime":1604652398225},{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pk\\Desktop\\my-world\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"h3-comp\">\n  <h3 class=\"h3-title\">闭包</h3>\n  <p class=\"p1\">\n    闭包是js基础绕不过的一个坑，对于非计算机专业的初学者来说，也是前期的一个小难点。闭包的定义非常简单，能够访问其他作用域的变量的函数就能称之为闭包。但在理解闭包之前，我们应该先理清的是js这门语言中作用域的特点。\n  </p>\n  <p class=\"p2\">\n    作用域说白了就是一个能产生作用的“域”，只有在这个范围内，变量和函数才能被访问和使用。超出了这个范围，就无法访问了。当html中的js代码放到浏览器运行时，所有的js代码都被放到了一个叫window的全局作用域中。es5中我们定义的所有全局变量，其实都是给window添加属性，所以会出现以下的情况。\n  </p>\n  <img src=\"../../assets/diary01/ava01.png\" alt=\"闭包一\" />\n  <h4>作用域的嵌套</h4>\n  <p>\n    作用域是可以嵌套的。由于js中没有块级作用域，我们常见的作用域嵌套都是函数作用域与函数作用域的嵌套。这里我们先来讲清一下函数定义和函数作用域产生的过程。\n  </p>\n  <p>首先，我们定义一个函数 hd</p>\n  <div class=\"code-box\">\n    <pre>\n      <code class=\"language-css\">\n          var y = 2;\n\n          function hd () {\n              var x = 1;\n              console.log(x); \n              console.log(y);\n          }\n      </code>\n  </pre>\n  </div>\n</div>\n",null]}